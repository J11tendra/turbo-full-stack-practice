/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific http://localhost:3000/todo todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const { v4: uuidv4 } = require("uuid");
const app = express();
const port = 3000;
app.use(express.json());
app.use(bodyParser.json());

// In-memory storage;
let todosArray = [
  {
    id: uuidv4(),
    title: "Buy Groceries",
    description: "get 1 litres of milk, 5 eggs, 2 carrots, 3 tomatos.",
    isCompleted: false,
  },
  {
    id: uuidv4(),
    title: "Study for Finals",
    description: "Mathematics:- Calculas, Geometry, Trignometry.",
    isCompleted: true,
  },
];

// Get all todos;
app.get("/todos", function (req, res) {
  try {
    if (todosArray.length === 0) {
      res.status(404).send("You don't have any todo's yet!");
    } else {
      const todosList = todosArray.map((todo) => ({
        id: todo.id,
        title: todo.title,
        status: todo.isCompleted,
      }));
      res.status(200).json(todosList);
    }
  } catch (err) {
    res.status(404).send(`You enter a wrong path: ${err.message}`);
  }
});

// Getting a specific todo by id;
app.get("/todos/:id", function (req, res) {
  const path = req.params.id;
  try {
    const matchedTodo = todosArray.filter(
      (matchedTodo) => matchedTodo.id === path
    );
    res.status(200).json(matchedTodo);
  } catch (err) {
    res.status(404).send(`Error getting your todo: ${err.message}`);
  }
});

// Creating a new todo:
app.post("/todos", function (req, res) {
  try {
    const newTodo = {
      id: uuidv4(),
      title: req.body.title,
      description: req.body.description,
      isCompleted: false,
    };
    todosArray.push(newTodo);
    res.status(201).json(newTodo);
  } catch (err) {
    res.status(500).send(`Internal Server Error: ${err.message}`);
  }
});

// Updating the todo;
app.put("/todos/:id", function (req, res) {
  try {
    const path = req.params.id;
    let matchedTodo = todosArray.find((matchedTodo) => matchedTodo.id === path);
    matchedTodo = {
      ...matchedTodo,
      title: req.body.title,
      description: req.body.description,
      isCompleted: req.body.status !== undefined ? req.body.status : false,
    };
    res.status(200).json(matchedTodo);
  } catch (err) {
    res.status(404).send(`Error getting your todo: ${err.message}`);
  }
});

// Deleting todo by ID;
app.delete("/todos/:id", function (req, res) {
  try {
    const path = req.params.id;
    const updatedTodosArray = todosArray.filter((todo) => todo.id !== path);

    if (todosArray.length === updatedTodosArray.length) {
      // No matching todo found
      res.status(404).send("Todo not found");
      return;
    }

    // Update todosArray with the filtered array
    todosArray = updatedTodosArray;

    res.status(204).send();
  } catch (err) {
    res.status(500).send(`Internal Server Error: ${err.message}`);
  }
});

// Route handler for unknown paths;
app.use((req, res) => {
  res.status(404).send("Internal Error Page not found!");
});

app.listen(port);
module.exports = app;
